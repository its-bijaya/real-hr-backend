# Generated by Django 2.2.11 on 2021-02-11 10:29

import django.contrib.postgres.fields
import django.contrib.postgres.fields.jsonb
import django.core.validators
from django.db import migrations, models
import irhrs.core.utils.common
import irhrs.core.validators
import irhrs.document.utils
import irhrs.recruitment.models.applicant
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Applicant',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('education_degree', models.CharField(choices=[('PHD', 'PHD'), ('Master', 'Master'), ('Bachelor', 'Bachelor'), ('Diploma', 'Diploma'), ('Intermediate', 'Intermediate'), ('SLC', 'SLC'), ('Below SLC', 'Below SLC')], max_length=20)),
                ('education_program', models.CharField(blank=True, max_length=100)),
                ('cv', models.FileField(blank=True, null=True, upload_to=irhrs.recruitment.models.applicant.get_applicant_file_upload_path, validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['doc', 'docx', 'odt', 'pdf', 'xls', 'xlsx', 'ods', 'ppt', 'pptx', 'txt', 'tif', 'tiff', 'jif', 'jfif', 'jp2', 'jpx', 'j2k', 'j2c', 'fpx', 'pcd', 'psd', 'rtf'])])),
                ('experience_years', models.FloatField(default=0, validators=[irhrs.core.validators.MinMaxValueValidator(max_value=60, min_value=0)])),
            ],
            options={
                'ordering': ('-created_at', '-modified_at'),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ApplicantAttachment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('attachment', models.FileField(upload_to=irhrs.core.utils.common.get_upload_path, validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['doc', 'docx', 'odt', 'pdf', 'xls', 'xlsx', 'ods', 'ppt', 'pptx', 'txt', 'tif', 'tiff', 'jif', 'jfif', 'jp2', 'jpx', 'j2k', 'j2c', 'fpx', 'pcd', 'psd', 'rtf', 'gif', 'jpeg', 'jpg', 'png'])])),
                ('name', models.CharField(max_length=255)),
                ('type', models.CharField(choices=[('apply', 'Job Apply'), ('salary_declaration', 'Salary Declaration')], default='apply', max_length=30)),
                ('is_archived', models.BooleanField(default=False)),
            ],
            options={
                'ordering': ('-created_at', '-modified_at'),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ApplicantEducation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('degree', models.CharField(choices=[('PHD', 'PHD'), ('Master', 'Master'), ('Bachelor', 'Bachelor'), ('Diploma', 'Diploma'), ('Intermediate', 'Intermediate'), ('SLC', 'SLC'), ('Below SLC', 'Below SLC')], max_length=20)),
                ('program', models.CharField(blank=True, max_length=100)),
            ],
            options={
                'ordering': ('-created_at', '-modified_at'),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ApplicantReference',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(db_index=True, max_length=50)),
                ('email', models.EmailField(blank=True, max_length=254)),
                ('designation', models.CharField(blank=True, max_length=100)),
                ('org_name', models.CharField(blank=True, db_index=True, max_length=255)),
                ('phone_number', models.CharField(max_length=30)),
                ('is_archived', models.BooleanField(default=False, help_text='When deleted, is_archived returns True')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ApplicantWorkExperience',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('org_name', models.CharField(db_index=True, max_length=255)),
                ('designation', models.CharField(blank=True, max_length=100)),
                ('years_of_service', models.FloatField(default=0, validators=[irhrs.core.validators.MinMaxValueValidator(max_value=60, min_value=0)])),
                ('is_archived', models.BooleanField(default=False, help_text='When deleted, is_archived returns True')),
            ],
            options={
                'ordering': ('-created_at', '-modified_at'),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Assessment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('status', models.CharField(choices=[('Pending', 'Pending'), ('Progress', 'Progress'), ('Completed', 'Completed')], default='Pending', max_length=20)),
                ('scheduled_at', models.DateTimeField(null=True)),
                ('verified', models.BooleanField(default=False)),
                ('data', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('score', models.FloatField(default=0, null=True)),
                ('category', models.CharField(blank=True, max_length=100)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AssessmentAnswer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('data', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('expires_at', models.DateTimeField(blank=True, null=True)),
                ('status', models.CharField(choices=[('Pending', 'Pending'), ('Progress', 'Progress'), ('Completed', 'Completed')], default='Pending', max_length=12)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='City',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('name_ne', models.CharField(blank=True, max_length=255)),
                ('alternative_names', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(blank=True, max_length=255), blank=True, size=None)),
                ('alternative_names_ne', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(blank=True, max_length=255), blank=True, size=None)),
                ('name', models.CharField(db_index=True, max_length=255)),
                ('category', models.CharField(max_length=25)),
                ('district_name', models.CharField(blank=True, max_length=255)),
                ('province', models.CharField(blank=True, max_length=255)),
                ('country', models.CharField(blank=True, max_length=255)),
                ('image', models.ImageField(blank=True, upload_to='local-governments')),
                ('latitude', models.FloatField(null=True)),
                ('longitude', models.FloatField(null=True)),
                ('relevance', models.IntegerField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Country',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(db_index=True, max_length=150, unique=True)),
                ('name_ne', models.CharField(blank=True, max_length=150)),
                ('nationality', models.CharField(db_index=True, max_length=150, unique=True)),
                ('nationality_ne', models.CharField(blank=True, max_length=150)),
                ('denonym', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(blank=True, max_length=150), blank=True, size=None)),
                ('adjectival', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(blank=True, max_length=150), blank=True, size=None)),
                ('relevance', models.IntegerField(null=True)),
            ],
            options={
                'ordering': ('relevance',),
            },
        ),
        migrations.CreateModel(
            name='District',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(db_index=True, max_length=255, unique=True)),
                ('name_ne', models.CharField(blank=True, max_length=255)),
                ('alternative_names', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(blank=True, max_length=255), blank=True, size=None)),
                ('alternative_names_ne', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(blank=True, max_length=255), blank=True, size=None)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='External',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ('-created_at', '-modified_at'),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ExternalDocument',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('attachment', models.FileField(upload_to=irhrs.document.utils.get_document_file_path, validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['jpg', 'jpeg', 'png', 'bmp', 'pdf', 'doc', 'docx', 'xls', 'xlsx', 'odt', 'ods', 'ppt', 'pptx', 'txt'])])),
                ('title', models.CharField(max_length=150)),
                ('is_archived', models.BooleanField(default=False)),
            ],
            options={
                'ordering': ('-created_at', '-modified_at'),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Interview',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('status', models.CharField(choices=[('Pending', 'Pending'), ('Progress', 'Progress'), ('Completed', 'Completed')], default='Pending', max_length=20)),
                ('scheduled_at', models.DateTimeField(null=True)),
                ('verified', models.BooleanField(default=False)),
                ('data', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('score', models.FloatField(default=0, null=True)),
                ('category', models.CharField(blank=True, max_length=100)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='InterViewAnswer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('data', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('expires_at', models.DateTimeField(blank=True, null=True)),
                ('status', models.CharField(choices=[('Pending', 'Pending'), ('Progress', 'Progress'), ('Completed', 'Completed')], default='Pending', max_length=12)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Job',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('slug', models.SlugField(blank=True, max_length=255, unique=True)),
                ('vacancies', models.PositiveSmallIntegerField(default=1)),
                ('deadline', models.DateTimeField(db_index=True, null=True, validators=[irhrs.core.validators.validate_future_datetime])),
                ('preferred_shift', models.CharField(choices=[('Morning', 'Morning'), ('Day', 'Day'), ('Evening', 'Evening'), ('Anytime', 'Anytime'), ('Night', 'Night')], default='Anytime', max_length=30)),
                ('location', models.CharField(blank=True, max_length=255)),
                ('salary_visible_to_candidate', models.BooleanField(default=True)),
                ('logo', models.ImageField(blank=True, null=True, upload_to=irhrs.core.utils.common.get_upload_path)),
                ('alternate_description', models.TextField(blank=True, verbose_name='Alternative Description')),
                ('description', models.TextField(blank=True)),
                ('specification', models.TextField(blank=True, verbose_name='job specification')),
                ('is_skill_specific', models.BooleanField(default=False)),
                ('education_degree', models.CharField(blank=True, choices=[('PHD', 'PHD'), ('Master', 'Master'), ('Bachelor', 'Bachelor'), ('Diploma', 'Diploma'), ('Intermediate', 'Intermediate'), ('SLC', 'SLC'), ('Below SLC', 'Below SLC')], max_length=20)),
                ('education_program', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(blank=True, max_length=50), null=True, size=None)),
                ('is_education_specific', models.BooleanField(default=False)),
                ('is_document_required', models.BooleanField(default=False)),
                ('apply_online', models.BooleanField(default=True)),
                ('apply_online_alternative', models.TextField(blank=True, help_text='Provide alternative way to apply for this job', verbose_name='Apply Instruction')),
                ('status', models.CharField(choices=[('Draft', 'Draft'), ('Pending', 'Pending'), ('Denied', 'Denied'), ('Published', 'Published'), ('Deleted', 'Deleted')], db_index=True, default='Draft', max_length=50)),
                ('hit_count', models.IntegerField(default=0)),
                ('posted_at', models.DateTimeField(blank=True, db_index=True, help_text='Job approved date time', null=True)),
                ('banner', models.ImageField(blank=True, null=True, upload_to='uploads/job/banner/')),
                ('data', django.contrib.postgres.fields.jsonb.JSONField(default=dict)),
                ('remarks', models.TextField(blank=True)),
                ('is_internal', models.BooleanField(default=False)),
                ('hiring_info', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='JobApply',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('status', models.CharField(choices=[('applied', 'Applied'), ('screened', 'Screened'), ('shortlisted', 'Shortlisted'), ('pre_screening_interviewed', 'Pre Screening Interview'), ('assessment_taken', 'Assessment Taken'), ('interviewed', 'Interviewed'), ('reference_verified', 'Reference Verified'), ('salary_declared', 'Salary Declared'), ('selected', 'Selected'), ('rejected', 'Rejected')], db_index=True, default='applied', max_length=50)),
                ('data', django.contrib.postgres.fields.jsonb.JSONField(default=dict)),
            ],
            options={
                'ordering': ('-created_at', '-modified_at'),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='JobApplyStage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('status', models.CharField(choices=[('applied', 'Applied'), ('screened', 'Screened'), ('shortlisted', 'Shortlisted'), ('pre_screening_interviewed', 'Pre Screening Interview'), ('assessment_taken', 'Assessment Taken'), ('interviewed', 'Interviewed'), ('reference_verified', 'Reference Verified'), ('salary_declared', 'Salary Declared'), ('selected', 'Selected'), ('rejected', 'Rejected')], db_index=True, default='applied', max_length=50)),
                ('on_hold', models.BooleanField(default=False)),
                ('remarks', models.CharField(blank=True, max_length=255)),
            ],
            options={
                'ordering': ('-created_at', '-modified_at'),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='JobApplyStageStatus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('on_hold', models.BooleanField(default=True)),
                ('remarks', models.CharField(blank=True, max_length=255)),
            ],
            options={
                'ordering': ('-created_at', '-modified_at'),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='JobAttachment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('attachment', models.FileField(upload_to=irhrs.core.utils.common.get_upload_path, validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['doc', 'docx', 'odt', 'pdf', 'xls', 'xlsx', 'ods', 'ppt', 'pptx', 'txt', 'tif', 'tiff', 'jif', 'jfif', 'jp2', 'jpx', 'j2k', 'j2c', 'fpx', 'pcd', 'psd', 'rtf', 'gif', 'jpeg', 'jpg', 'png'])])),
                ('name', models.CharField(max_length=255)),
                ('is_archived', models.BooleanField(default=False)),
            ],
            options={
                'ordering': ('-created_at', '-modified_at'),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='JobBenefit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(db_index=True, max_length=255, unique=True)),
                ('status', models.CharField(choices=[('Pending', 'Pending'), ('Approved', 'Approved'), ('Denied', 'Denied'), ('Merged', 'Merged')], db_index=True, default='Pending', max_length=30)),
            ],
            options={
                'ordering': ('-created_at', '-modified_at'),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='JobCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('slug', models.SlugField(blank=True, max_length=255, unique=True)),
                ('name', models.CharField(db_index=True, max_length=250)),
            ],
        ),
        migrations.CreateModel(
            name='JobQuestion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ('-created_at', '-modified_at'),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='JobQuestionAnswer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('data', django.contrib.postgres.fields.jsonb.JSONField(blank=True)),
            ],
            options={
                'ordering': ('-created_at', '-modified_at'),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='JobSetting',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_experience_required', models.BooleanField(default=False)),
                ('min_experience_months', models.IntegerField(null=True, validators=[django.core.validators.MinValueValidator(limit_value=0)])),
                ('max_experience_months', models.IntegerField(null=True, validators=[django.core.validators.MinValueValidator(limit_value=0)])),
                ('is_gender_specific', models.BooleanField(default=False)),
                ('gender', models.CharField(choices=[('Male', 'Male'), ('Female', 'Female'), ('Other', 'Other')], max_length=20, null=True)),
                ('is_age_specific', models.BooleanField(default=False)),
                ('min_age', models.IntegerField(null=True, validators=[django.core.validators.MinValueValidator(limit_value=0)])),
                ('max_age', models.IntegerField(null=True, validators=[django.core.validators.MinValueValidator(limit_value=0)])),
                ('required_two_wheeler', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='Language',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(db_index=True, max_length=100, unique=True)),
                ('status', models.CharField(choices=[('Pending', 'Pending'), ('Approved', 'Approved'), ('Denied', 'Denied'), ('Merged', 'Merged')], db_index=True, default='Pending', max_length=25)),
                ('alternative_names', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(blank=True, max_length=255), blank=True, size=None)),
                ('relevance', models.IntegerField(null=True)),
            ],
            options={
                'ordering': ('relevance',),
            },
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('street', models.CharField(blank=True, db_index=True, max_length=255)),
                ('address', models.CharField(max_length=255)),
                ('city_name', models.CharField(blank=True, max_length=200)),
                ('latitude', models.FloatField(null=True)),
                ('longitude', models.FloatField(null=True)),
                ('status', models.CharField(choices=[('Pending', 'Pending'), ('Approved', 'Approved'), ('Denied', 'Denied'), ('Merged', 'Merged')], db_index=True, default='Pending', max_length=30)),
            ],
            options={
                'ordering': ('-created_at', '-modified_at'),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='NoObjection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(max_length=100)),
                ('stage', models.CharField(choices=[('applied', 'Applied'), ('screened', 'Screened'), ('shortlisted', 'Shortlisted'), ('pre_screening_interviewed', 'Pre Screening Interview'), ('assessment_taken', 'Assessment Taken'), ('interviewed', 'Interviewed'), ('reference_verified', 'Reference Verified'), ('salary_declared', 'Salary Declared'), ('selected', 'Selected'), ('rejected', 'Rejected')], db_index=True, max_length=50)),
                ('score', models.FloatField(default=0)),
                ('categories', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=200), blank=True, null=True, size=None)),
                ('file', models.FileField(upload_to=irhrs.core.utils.common.get_upload_path, validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['doc', 'docx', 'odt', 'pdf', 'xls', 'xlsx', 'ods', 'ppt', 'pptx', 'txt', 'tif', 'tiff', 'jif', 'jfif', 'jp2', 'jpx', 'j2k', 'j2c', 'fpx', 'pcd', 'psd', 'rtf', 'gif', 'jpeg', 'jpg', 'png'])])),
                ('modified_template', models.TextField(blank=True, null=True)),
                ('status', models.CharField(choices=[('Pending', 'Pending'), ('Completed', 'Completed'), ('Approved', 'Approved'), ('Denied', 'Denied')], default='Pending', max_length=15)),
                ('remarks', models.CharField(blank=True, max_length=200)),
                ('verified', models.BooleanField(default=False)),
            ],
            options={
                'ordering': ('-created_at', '-modified_at'),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PostScreening',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('status', models.CharField(choices=[('Pending', 'Pending'), ('Progress', 'Progress'), ('Completed', 'Completed')], default='Pending', max_length=20)),
                ('scheduled_at', models.DateTimeField(null=True)),
                ('verified', models.BooleanField(default=False)),
                ('data', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('score', models.FloatField(default=0, null=True)),
                ('category', models.CharField(blank=True, max_length=100)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PreScreening',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('status', models.CharField(choices=[('Pending', 'Pending'), ('Progress', 'Progress'), ('Completed', 'Completed')], default='Pending', max_length=20)),
                ('scheduled_at', models.DateTimeField(null=True)),
                ('verified', models.BooleanField(default=False)),
                ('data', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('score', models.FloatField(default=0, null=True)),
                ('category', models.CharField(blank=True, max_length=100)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PreScreeningInterview',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('status', models.CharField(choices=[('Pending', 'Pending'), ('Progress', 'Progress'), ('Completed', 'Completed')], default='Pending', max_length=20)),
                ('scheduled_at', models.DateTimeField(null=True)),
                ('verified', models.BooleanField(default=False)),
                ('data', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('score', models.FloatField(default=0, null=True)),
                ('category', models.CharField(blank=True, max_length=100)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PreScreeningInterviewAnswer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('status', models.CharField(choices=[('Pending', 'Pending'), ('Progress', 'Progress'), ('Completed', 'Completed')], default='Pending', max_length=20)),
                ('scheduled_at', models.DateTimeField(null=True)),
                ('verified', models.BooleanField(default=False)),
                ('data', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('score', models.FloatField(default=0, null=True)),
                ('category', models.CharField(blank=True, max_length=100)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Province',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(db_index=True, max_length=255, unique=True)),
                ('name_ne', models.CharField(blank=True, max_length=255)),
                ('alternative_names', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(blank=True, max_length=255), blank=True, size=None)),
                ('alternative_names_ne', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(blank=True, max_length=255), blank=True, size=None)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(blank=True, max_length=200)),
                ('question', models.TextField()),
                ('description', models.TextField(blank=True)),
                ('question_type', models.CharField(choices=[('text', 'Short Answer'), ('textarea', 'Multi-line Answer')], max_length=50)),
                ('order', models.PositiveIntegerField(default=1, validators=[django.core.validators.MinValueValidator(limit_value=1)])),
                ('is_required', models.BooleanField(default=False)),
                ('is_archived', models.BooleanField(default=False)),
            ],
            options={
                'ordering': ('-created_at', '-modified_at'),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='QuestionSet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=100)),
                ('description', models.CharField(blank=True, max_length=1000)),
                ('form_type', models.CharField(choices=[('vacancy', 'Vacancy Question'), ('pre_screening', 'Pre Screening'), ('post_screening', 'Post Screening'), ('pre_screening_interview', 'Pre Screening Interview'), ('assessment', 'Assessment'), ('interview_evaluation', 'Interview Evaluation'), ('reference_check', 'Reference Check')], max_length=30)),
                ('is_archived', models.BooleanField(default=False)),
            ],
            options={
                'ordering': ('-created_at', '-modified_at'),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='RecruitmentQuestions',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('is_mandatory', models.BooleanField(default=True)),
                ('order', models.PositiveSmallIntegerField()),
            ],
            options={
                'ordering': ('order',),
            },
        ),
        migrations.CreateModel(
            name='RecruitmentQuestionSection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, max_length=600, validators=[irhrs.core.validators.validate_description])),
            ],
            options={
                'ordering': ('created_at',),
            },
        ),
        migrations.CreateModel(
            name='ReferenceCheck',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('status', models.CharField(choices=[('Pending', 'Pending'), ('Progress', 'Progress'), ('Completed', 'Completed')], default='Pending', max_length=20)),
                ('scheduled_at', models.DateTimeField(null=True)),
                ('verified', models.BooleanField(default=False)),
                ('data', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('score', models.FloatField(default=0, null=True)),
                ('category', models.CharField(blank=True, max_length=100)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ReferenceCheckAnswer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('data', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('expires_at', models.DateTimeField(blank=True, null=True)),
                ('status', models.CharField(choices=[('Pending', 'Pending'), ('Progress', 'Progress'), ('Completed', 'Completed')], default='Pending', max_length=12)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ReferenceChecker',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False)),
            ],
            options={
                'ordering': ('-created_at', '-modified_at'),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Salary',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('currency', models.CharField(choices=[('NRs', 'NRs'), ('$', '$'), ('IRs', 'IRs')], db_index=True, default='NRs', max_length=25)),
                ('operator', models.CharField(choices=[('Above', 'Above'), ('Below', 'Below'), ('Equals', 'Equals')], db_index=True, max_length=25, null=True)),
                ('minimum', models.FloatField(blank=True, default=0, null=True, validators=[django.core.validators.MinValueValidator(limit_value=0)])),
                ('maximum', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(limit_value=0)])),
                ('unit', models.CharField(choices=[('Hourly', 'Hourly'), ('Daily', 'Daily'), ('Weekly', 'Weekly'), ('Monthly', 'Monthly'), ('Yearly', 'Yearly')], db_index=True, default='Monthly', max_length=25)),
            ],
            options={
                'ordering': ('-created_at', '-modified_at'),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SalaryDeclaration',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('salary', models.FloatField(default=0)),
                ('score', models.FloatField(default=0)),
                ('categories', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=200), blank=True, null=True, size=None)),
                ('status', models.CharField(choices=[('Pending', 'Pending'), ('Progress', 'Progress'), ('Completed', 'Completed'), ('Denied', 'Denied')], default='Pending', max_length=15)),
                ('verified', models.BooleanField(default=False)),
                ('candidate_remarks', models.CharField(blank=True, max_length=200)),
            ],
            options={
                'ordering': ('-created_at', '-modified_at'),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Template',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('slug', models.SlugField(blank=True, max_length=255, unique=True)),
                ('title', models.CharField(max_length=255, validators=[irhrs.core.validators.validate_title])),
                ('message', models.TextField()),
                ('type', models.CharField(choices=[('candidate_letter', 'Candidate Letter'), ('external_user_letter', 'External User Letter'), ('no_objection_letter', 'No Objection Letter'), ('salary_declaration_letter', 'Salary Declaration Letter'), ('shortlist_memorandum', 'Post Screening Memorandum Report'), ('interview_memorandum', 'Interview Memorandum Report'), ('employment_agreement', 'Employment Agreement')], max_length=30)),
            ],
            options={
                'ordering': ('-created_at', '-modified_at'),
                'abstract': False,
            },
        ),
    ]
