# Generated by Django 2.2.11 on 2021-02-11 10:29

import django.core.validators
from django.db import migrations, models
import django.utils.timezone
import irhrs.task.utils.task_attachment_path
import irhrs.task.utils.validators


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='CoreTask',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, max_length=600)),
                ('order', models.PositiveSmallIntegerField(default=1, validators=[django.core.validators.MinValueValidator(limit_value=1)])),
            ],
            options={
                'ordering': ('order',),
            },
        ),
        migrations.CreateModel(
            name='RecurringTaskDate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('recurring_at', models.DateField()),
                ('remarks', models.TextField(blank=True, null=True)),
                ('last_tried', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'ordering': ('-created_at', '-modified_at'),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ResultArea',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, max_length=600)),
            ],
            options={
                'ordering': ('-created_at', '-modified_at'),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(max_length=100)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('description', models.TextField(blank=True, help_text='Description about the Task', max_length=10000, null=True)),
                ('priority', models.CharField(choices=[('MINOR', 'MINOR'), ('MAJOR', 'MAJOR'), ('CRITICAL', 'CRITICAL')], default='MINOR', max_length=9)),
                ('status', models.PositiveSmallIntegerField(choices=[(1, 'PENDING'), (2, 'IN PROGRESS'), (4, 'COMPLETED'), (5, 'CLOSED'), (3, 'ON HOLD')], default=1)),
                ('starts_at', models.DateTimeField(default=django.utils.timezone.now, help_text='Start Task from ')),
                ('deadline', models.DateTimeField(help_text='Deadline for the task')),
                ('start', models.DateTimeField(blank=True, help_text='Work on task started from', null=True)),
                ('finish', models.DateTimeField(blank=True, help_text='Work on task finished on', null=True)),
                ('changeable_deadline', models.BooleanField(default=True, help_text='Responsible Can Change Deadline')),
                ('approve_required', models.BooleanField(default=True, help_text='Approve Task When Completed')),
                ('approved', models.BooleanField(default=False)),
                ('approved_at', models.DateTimeField(blank=True, null=True)),
                ('recurring_rule', models.TextField(blank=True, null=True)),
                ('recurring_first_run', models.DateField(blank=True, null=True)),
                ('freeze', models.BooleanField(default=False)),
            ],
            options={
                'ordering': ('-created_at', '-modified_at'),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TaskActivity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('previous_value', models.TextField(blank=True, null=True)),
                ('previous_value_display', models.TextField(blank=True, null=True)),
                ('present_value', models.TextField(blank=True, null=True)),
                ('present_value_display', models.TextField(blank=True, null=True)),
                ('key', models.CharField(max_length=50)),
                ('description', models.TextField()),
            ],
            options={
                'ordering': ('-created_at',),
            },
        ),
        migrations.CreateModel(
            name='TaskAssociation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('association', models.CharField(choices=[('R', 'Responsible Person'), ('O', 'Observer')], max_length=18)),
                ('is_active', models.BooleanField(default=True)),
                ('read_only', models.BooleanField(default=False, help_text='Determines if the row is editable or not ')),
                ('efficiency_from_priority', models.FloatField(blank=True, null=True, validators=[irhrs.task.utils.validators.validate_efficiency])),
                ('efficiency_from_timely', models.FloatField(blank=True, null=True, validators=[irhrs.task.utils.validators.validate_efficiency])),
                ('efficiency_from_score', models.FloatField(blank=True, null=True, validators=[irhrs.task.utils.validators.validate_efficiency])),
                ('efficiency', models.FloatField(blank=True, null=True, validators=[irhrs.task.utils.validators.validate_efficiency])),
                ('cycle_status', models.CharField(blank=True, choices=[('Approval Pending', 'Approval Pending'), ('Score Not Provided', 'Score Not Provided'), ('Acknowledge Pending', 'Acknowledge Pending'), ('Forwarded To HR', 'Forwarded To HR'), ('Approved By HR', 'Approved By HR'), ('Acknowledged', 'Acknowledged'), ('Not Acknowledged', 'Not Acknowledged')], default='Approval Pending', max_length=32)),
            ],
            options={
                'verbose_name': 'Task User',
                'verbose_name_plural': 'Task Users',
            },
        ),
        migrations.CreateModel(
            name='TaskAttachment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('attachment', models.FileField(upload_to=irhrs.task.utils.task_attachment_path.get_task_attachment_path, validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['doc', 'docx', 'odt', 'pdf', 'xls', 'xlsx', 'ods', 'ppt', 'pptx', 'txt', 'tif', 'tiff', 'jif', 'jfif', 'jp2', 'jpx', 'j2k', 'j2c', 'fpx', 'pcd', 'psd', 'rtf', 'gif', 'jpeg', 'jpg', 'png'])])),
                ('caption', models.CharField(blank=True, max_length=200, null=True)),
            ],
            options={
                'ordering': ('created_at',),
            },
        ),
        migrations.CreateModel(
            name='TaskCheckList',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(max_length=100)),
                ('completed_on', models.DateTimeField(null=True)),
                ('order', models.IntegerField(null=True, validators=[django.core.validators.MinValueValidator(1)])),
            ],
            options={
                'ordering': ('order', 'created_at'),
            },
        ),
        migrations.CreateModel(
            name='TaskComment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('comment', models.TextField(max_length=1000)),
            ],
            options={
                'verbose_name': 'Task Comment',
                'verbose_name_plural': 'Task Comments',
                'ordering': ('-created_at',),
            },
        ),
        migrations.CreateModel(
            name='TaskProject',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=200, unique=True)),
                ('description', models.TextField()),
            ],
            options={
                'ordering': ('-created_at', '-modified_at'),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TaskReminder',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('remind_on', models.DateTimeField()),
                ('method', models.CharField(choices=[('email', 'Email'), ('notification', 'Notification')], default='notification', max_length=12)),
                ('sent_on', models.DateTimeField(blank=True, null=True)),
                ('status', models.CharField(choices=[('pending', 'Pending Reminder'), ('sent', 'Reminder Sent'), ('failed', 'Reminder Failed')], default='pending', max_length=8)),
                ('extra_data', models.TextField(blank=True, null=True)),
            ],
            options={
                'ordering': ('-created_at', '-modified_at'),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TaskVerificationScore',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('score', models.PositiveSmallIntegerField(validators=[irhrs.task.utils.validators.validate_score])),
                ('remarks', models.TextField()),
                ('ack', models.NullBooleanField()),
                ('ack_remarks', models.TextField(blank=True, null=True)),
                ('ack_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'ordering': ('-created_at', '-modified_at'),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='UserResultArea',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('key_result_area', models.BooleanField(default=False)),
                ('core_tasks', models.ManyToManyField(to='task.CoreTask')),
            ],
        ),
    ]
