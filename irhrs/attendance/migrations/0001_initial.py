# Generated by Django 2.2.11 on 2021-02-11 10:29

import django.contrib.postgres.fields.jsonb
import django.core.validators
from django.db import migrations, models
import irhrs.attendance.models.attendance
import irhrs.attendance.utils.validators
import irhrs.core.fields.fields
import irhrs.core.mixins.model_diff
import irhrs.core.utils.common
import irhrs.core.validators


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='BreakOutAggregatedReportView',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_lost', models.DurationField()),
            ],
            options={
                'db_table': 'attendance_aggregate_breakout_result',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='BreakOutReportView',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('remark_category', models.CharField(max_length=255)),
                ('total_lost', models.DurationField()),
                ('timesheet_for', models.DateField()),
            ],
            options={
                'db_table': 'attendance_break_out_report_view',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AttendanceAdjustment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('old_punch_in', models.DateTimeField(null=True, validators=[irhrs.core.validators.validate_past_datetime])),
                ('old_punch_out', models.DateTimeField(null=True, validators=[irhrs.core.validators.validate_past_datetime])),
                ('new_punch_in', models.DateTimeField(null=True, validators=[irhrs.core.validators.validate_past_datetime])),
                ('new_punch_out', models.DateTimeField(null=True, validators=[irhrs.core.validators.validate_past_datetime])),
                ('status', models.CharField(choices=[('Requested', 'Requested'), ('Forwarded', 'Forwarded'), ('Approved', 'Approved'), ('Declined', 'Declined'), ('Cancelled', 'Cancelled')], default='Requested', max_length=15)),
                ('description', models.CharField(max_length=255)),
            ],
            options={
                'ordering': ('-created_at', '-modified_at'),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AttendanceAdjustmentHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('action_performed', models.CharField(choices=[('Requested', 'Requested'), ('Forwarded', 'Forwarded'), ('Approved', 'Approved'), ('Declined', 'Declined'), ('Cancelled', 'Cancelled')], max_length=15)),
                ('remark', models.CharField(blank=True, max_length=255)),
            ],
            options={
                'ordering': ('-created_at', '-modified_at'),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AttendanceEntryCache',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('bio_id', models.CharField(max_length=11)),
                ('timestamp', models.DateTimeField()),
                ('entry_category', models.CharField(help_text='Entry Category from Device', max_length=11)),
                ('reason', models.PositiveSmallIntegerField(choices=[(2, 'Pending sync'), (1, 'Sync Failed'), (3, 'Sync Success')], default=2)),
                ('sync_tries', models.IntegerField(default=0)),
                ('sync_description', models.TextField(blank=True, null=True)),
            ],
            options={
                'ordering': ('timestamp',),
            },
        ),
        migrations.CreateModel(
            name='AttendanceSource',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('serial_number', models.CharField(max_length=50, unique=True)),
                ('name', models.CharField(help_text='Set name to identify the device uniquely.', max_length=50)),
                ('last_activity', models.DateTimeField(blank=True, null=True)),
                ('sync_method', models.PositiveSmallIntegerField(choices=[(1, 'ADMS'), (2, 'Dirsync'), (4, 'External Server'), (3, 'Do not sync')], default=3)),
                ('ip', models.GenericIPAddressField(blank=True, null=True, protocol='ipv4')),
                ('port', models.IntegerField(blank=True, null=True)),
                ('disable_device', models.BooleanField(default=True, help_text="This disables the device before pulling new data and enables the device after completion. WARNING: Turning this off may cause data-loss if 'Clear Device' option has been enabled. Only applicable for direct sync devices.", verbose_name='disable device to pull attendance data')),
                ('clear_device', models.BooleanField(default=False, help_text="WARNING: This can cause data-loss if 'Disable to Pull' option has been turned off. Only applicable for direct sync devices.", verbose_name='clear device after pulling data')),
                ('extra_data', irhrs.core.fields.fields.JSONTextField(blank=True, null=True)),
                ('timezone', models.CharField(blank=True, choices=[('Africa/Abidjan', 'Africa/Abidjan'), ('Africa/Accra', 'Africa/Accra'), ('Africa/Addis_Ababa', 'Africa/Addis_Ababa'), ('Africa/Algiers', 'Africa/Algiers'), ('Africa/Asmara', 'Africa/Asmara'), ('Africa/Bamako', 'Africa/Bamako'), ('Africa/Bangui', 'Africa/Bangui'), ('Africa/Banjul', 'Africa/Banjul'), ('Africa/Bissau', 'Africa/Bissau'), ('Africa/Blantyre', 'Africa/Blantyre'), ('Africa/Brazzaville', 'Africa/Brazzaville'), ('Africa/Bujumbura', 'Africa/Bujumbura'), ('Africa/Cairo', 'Africa/Cairo'), ('Africa/Casablanca', 'Africa/Casablanca'), ('Africa/Ceuta', 'Africa/Ceuta'), ('Africa/Conakry', 'Africa/Conakry'), ('Africa/Dakar', 'Africa/Dakar'), ('Africa/Dar_es_Salaam', 'Africa/Dar_es_Salaam'), ('Africa/Djibouti', 'Africa/Djibouti'), ('Africa/Douala', 'Africa/Douala'), ('Africa/El_Aaiun', 'Africa/El_Aaiun'), ('Africa/Freetown', 'Africa/Freetown'), ('Africa/Gaborone', 'Africa/Gaborone'), ('Africa/Harare', 'Africa/Harare'), ('Africa/Johannesburg', 'Africa/Johannesburg'), ('Africa/Juba', 'Africa/Juba'), ('Africa/Kampala', 'Africa/Kampala'), ('Africa/Khartoum', 'Africa/Khartoum'), ('Africa/Kigali', 'Africa/Kigali'), ('Africa/Kinshasa', 'Africa/Kinshasa'), ('Africa/Lagos', 'Africa/Lagos'), ('Africa/Libreville', 'Africa/Libreville'), ('Africa/Lome', 'Africa/Lome'), ('Africa/Luanda', 'Africa/Luanda'), ('Africa/Lubumbashi', 'Africa/Lubumbashi'), ('Africa/Lusaka', 'Africa/Lusaka'), ('Africa/Malabo', 'Africa/Malabo'), ('Africa/Maputo', 'Africa/Maputo'), ('Africa/Maseru', 'Africa/Maseru'), ('Africa/Mbabane', 'Africa/Mbabane'), ('Africa/Mogadishu', 'Africa/Mogadishu'), ('Africa/Monrovia', 'Africa/Monrovia'), ('Africa/Nairobi', 'Africa/Nairobi'), ('Africa/Ndjamena', 'Africa/Ndjamena'), ('Africa/Niamey', 'Africa/Niamey'), ('Africa/Nouakchott', 'Africa/Nouakchott'), ('Africa/Ouagadougou', 'Africa/Ouagadougou'), ('Africa/Porto-Novo', 'Africa/Porto-Novo'), ('Africa/Sao_Tome', 'Africa/Sao_Tome'), ('Africa/Tripoli', 'Africa/Tripoli'), ('Africa/Tunis', 'Africa/Tunis'), ('Africa/Windhoek', 'Africa/Windhoek'), ('America/Adak', 'America/Adak'), ('America/Anchorage', 'America/Anchorage'), ('America/Anguilla', 'America/Anguilla'), ('America/Antigua', 'America/Antigua'), ('America/Araguaina', 'America/Araguaina'), ('America/Argentina/Buenos_Aires', 'America/Argentina/Buenos_Aires'), ('America/Argentina/Catamarca', 'America/Argentina/Catamarca'), ('America/Argentina/Cordoba', 'America/Argentina/Cordoba'), ('America/Argentina/Jujuy', 'America/Argentina/Jujuy'), ('America/Argentina/La_Rioja', 'America/Argentina/La_Rioja'), ('America/Argentina/Mendoza', 'America/Argentina/Mendoza'), ('America/Argentina/Rio_Gallegos', 'America/Argentina/Rio_Gallegos'), ('America/Argentina/Salta', 'America/Argentina/Salta'), ('America/Argentina/San_Juan', 'America/Argentina/San_Juan'), ('America/Argentina/San_Luis', 'America/Argentina/San_Luis'), ('America/Argentina/Tucuman', 'America/Argentina/Tucuman'), ('America/Argentina/Ushuaia', 'America/Argentina/Ushuaia'), ('America/Aruba', 'America/Aruba'), ('America/Asuncion', 'America/Asuncion'), ('America/Atikokan', 'America/Atikokan'), ('America/Bahia', 'America/Bahia'), ('America/Bahia_Banderas', 'America/Bahia_Banderas'), ('America/Barbados', 'America/Barbados'), ('America/Belem', 'America/Belem'), ('America/Belize', 'America/Belize'), ('America/Blanc-Sablon', 'America/Blanc-Sablon'), ('America/Boa_Vista', 'America/Boa_Vista'), ('America/Bogota', 'America/Bogota'), ('America/Boise', 'America/Boise'), ('America/Cambridge_Bay', 'America/Cambridge_Bay'), ('America/Campo_Grande', 'America/Campo_Grande'), ('America/Cancun', 'America/Cancun'), ('America/Caracas', 'America/Caracas'), ('America/Cayenne', 'America/Cayenne'), ('America/Cayman', 'America/Cayman'), ('America/Chicago', 'America/Chicago'), ('America/Chihuahua', 'America/Chihuahua'), ('America/Costa_Rica', 'America/Costa_Rica'), ('America/Creston', 'America/Creston'), ('America/Cuiaba', 'America/Cuiaba'), ('America/Curacao', 'America/Curacao'), ('America/Danmarkshavn', 'America/Danmarkshavn'), ('America/Dawson', 'America/Dawson'), ('America/Dawson_Creek', 'America/Dawson_Creek'), ('America/Denver', 'America/Denver'), ('America/Detroit', 'America/Detroit'), ('America/Dominica', 'America/Dominica'), ('America/Edmonton', 'America/Edmonton'), ('America/Eirunepe', 'America/Eirunepe'), ('America/El_Salvador', 'America/El_Salvador'), ('America/Fort_Nelson', 'America/Fort_Nelson'), ('America/Fortaleza', 'America/Fortaleza'), ('America/Glace_Bay', 'America/Glace_Bay'), ('America/Godthab', 'America/Godthab'), ('America/Goose_Bay', 'America/Goose_Bay'), ('America/Grand_Turk', 'America/Grand_Turk'), ('America/Grenada', 'America/Grenada'), ('America/Guadeloupe', 'America/Guadeloupe'), ('America/Guatemala', 'America/Guatemala'), ('America/Guayaquil', 'America/Guayaquil'), ('America/Guyana', 'America/Guyana'), ('America/Halifax', 'America/Halifax'), ('America/Havana', 'America/Havana'), ('America/Hermosillo', 'America/Hermosillo'), ('America/Indiana/Indianapolis', 'America/Indiana/Indianapolis'), ('America/Indiana/Knox', 'America/Indiana/Knox'), ('America/Indiana/Marengo', 'America/Indiana/Marengo'), ('America/Indiana/Petersburg', 'America/Indiana/Petersburg'), ('America/Indiana/Tell_City', 'America/Indiana/Tell_City'), ('America/Indiana/Vevay', 'America/Indiana/Vevay'), ('America/Indiana/Vincennes', 'America/Indiana/Vincennes'), ('America/Indiana/Winamac', 'America/Indiana/Winamac'), ('America/Inuvik', 'America/Inuvik'), ('America/Iqaluit', 'America/Iqaluit'), ('America/Jamaica', 'America/Jamaica'), ('America/Juneau', 'America/Juneau'), ('America/Kentucky/Louisville', 'America/Kentucky/Louisville'), ('America/Kentucky/Monticello', 'America/Kentucky/Monticello'), ('America/Kralendijk', 'America/Kralendijk'), ('America/La_Paz', 'America/La_Paz'), ('America/Lima', 'America/Lima'), ('America/Los_Angeles', 'America/Los_Angeles'), ('America/Lower_Princes', 'America/Lower_Princes'), ('America/Maceio', 'America/Maceio'), ('America/Managua', 'America/Managua'), ('America/Manaus', 'America/Manaus'), ('America/Marigot', 'America/Marigot'), ('America/Martinique', 'America/Martinique'), ('America/Matamoros', 'America/Matamoros'), ('America/Mazatlan', 'America/Mazatlan'), ('America/Menominee', 'America/Menominee'), ('America/Merida', 'America/Merida'), ('America/Metlakatla', 'America/Metlakatla'), ('America/Mexico_City', 'America/Mexico_City'), ('America/Miquelon', 'America/Miquelon'), ('America/Moncton', 'America/Moncton'), ('America/Monterrey', 'America/Monterrey'), ('America/Montevideo', 'America/Montevideo'), ('America/Montserrat', 'America/Montserrat'), ('America/Nassau', 'America/Nassau'), ('America/New_York', 'America/New_York'), ('America/Nipigon', 'America/Nipigon'), ('America/Nome', 'America/Nome'), ('America/Noronha', 'America/Noronha'), ('America/North_Dakota/Beulah', 'America/North_Dakota/Beulah'), ('America/North_Dakota/Center', 'America/North_Dakota/Center'), ('America/North_Dakota/New_Salem', 'America/North_Dakota/New_Salem'), ('America/Ojinaga', 'America/Ojinaga'), ('America/Panama', 'America/Panama'), ('America/Pangnirtung', 'America/Pangnirtung'), ('America/Paramaribo', 'America/Paramaribo'), ('America/Phoenix', 'America/Phoenix'), ('America/Port-au-Prince', 'America/Port-au-Prince'), ('America/Port_of_Spain', 'America/Port_of_Spain'), ('America/Porto_Velho', 'America/Porto_Velho'), ('America/Puerto_Rico', 'America/Puerto_Rico'), ('America/Punta_Arenas', 'America/Punta_Arenas'), ('America/Rainy_River', 'America/Rainy_River'), ('America/Rankin_Inlet', 'America/Rankin_Inlet'), ('America/Recife', 'America/Recife'), ('America/Regina', 'America/Regina'), ('America/Resolute', 'America/Resolute'), ('America/Rio_Branco', 'America/Rio_Branco'), ('America/Santarem', 'America/Santarem'), ('America/Santiago', 'America/Santiago'), ('America/Santo_Domingo', 'America/Santo_Domingo'), ('America/Sao_Paulo', 'America/Sao_Paulo'), ('America/Scoresbysund', 'America/Scoresbysund'), ('America/Sitka', 'America/Sitka'), ('America/St_Barthelemy', 'America/St_Barthelemy'), ('America/St_Johns', 'America/St_Johns'), ('America/St_Kitts', 'America/St_Kitts'), ('America/St_Lucia', 'America/St_Lucia'), ('America/St_Thomas', 'America/St_Thomas'), ('America/St_Vincent', 'America/St_Vincent'), ('America/Swift_Current', 'America/Swift_Current'), ('America/Tegucigalpa', 'America/Tegucigalpa'), ('America/Thule', 'America/Thule'), ('America/Thunder_Bay', 'America/Thunder_Bay'), ('America/Tijuana', 'America/Tijuana'), ('America/Toronto', 'America/Toronto'), ('America/Tortola', 'America/Tortola'), ('America/Vancouver', 'America/Vancouver'), ('America/Whitehorse', 'America/Whitehorse'), ('America/Winnipeg', 'America/Winnipeg'), ('America/Yakutat', 'America/Yakutat'), ('America/Yellowknife', 'America/Yellowknife'), ('Antarctica/Casey', 'Antarctica/Casey'), ('Antarctica/Davis', 'Antarctica/Davis'), ('Antarctica/DumontDUrville', 'Antarctica/DumontDUrville'), ('Antarctica/Macquarie', 'Antarctica/Macquarie'), ('Antarctica/Mawson', 'Antarctica/Mawson'), ('Antarctica/McMurdo', 'Antarctica/McMurdo'), ('Antarctica/Palmer', 'Antarctica/Palmer'), ('Antarctica/Rothera', 'Antarctica/Rothera'), ('Antarctica/Syowa', 'Antarctica/Syowa'), ('Antarctica/Troll', 'Antarctica/Troll'), ('Antarctica/Vostok', 'Antarctica/Vostok'), ('Arctic/Longyearbyen', 'Arctic/Longyearbyen'), ('Asia/Aden', 'Asia/Aden'), ('Asia/Almaty', 'Asia/Almaty'), ('Asia/Amman', 'Asia/Amman'), ('Asia/Anadyr', 'Asia/Anadyr'), ('Asia/Aqtau', 'Asia/Aqtau'), ('Asia/Aqtobe', 'Asia/Aqtobe'), ('Asia/Ashgabat', 'Asia/Ashgabat'), ('Asia/Atyrau', 'Asia/Atyrau'), ('Asia/Baghdad', 'Asia/Baghdad'), ('Asia/Bahrain', 'Asia/Bahrain'), ('Asia/Baku', 'Asia/Baku'), ('Asia/Bangkok', 'Asia/Bangkok'), ('Asia/Barnaul', 'Asia/Barnaul'), ('Asia/Beirut', 'Asia/Beirut'), ('Asia/Bishkek', 'Asia/Bishkek'), ('Asia/Brunei', 'Asia/Brunei'), ('Asia/Chita', 'Asia/Chita'), ('Asia/Choibalsan', 'Asia/Choibalsan'), ('Asia/Colombo', 'Asia/Colombo'), ('Asia/Damascus', 'Asia/Damascus'), ('Asia/Dhaka', 'Asia/Dhaka'), ('Asia/Dili', 'Asia/Dili'), ('Asia/Dubai', 'Asia/Dubai'), ('Asia/Dushanbe', 'Asia/Dushanbe'), ('Asia/Famagusta', 'Asia/Famagusta'), ('Asia/Gaza', 'Asia/Gaza'), ('Asia/Hebron', 'Asia/Hebron'), ('Asia/Ho_Chi_Minh', 'Asia/Ho_Chi_Minh'), ('Asia/Hong_Kong', 'Asia/Hong_Kong'), ('Asia/Hovd', 'Asia/Hovd'), ('Asia/Irkutsk', 'Asia/Irkutsk'), ('Asia/Jakarta', 'Asia/Jakarta'), ('Asia/Jayapura', 'Asia/Jayapura'), ('Asia/Jerusalem', 'Asia/Jerusalem'), ('Asia/Kabul', 'Asia/Kabul'), ('Asia/Kamchatka', 'Asia/Kamchatka'), ('Asia/Karachi', 'Asia/Karachi'), ('Asia/Kathmandu', 'Asia/Kathmandu'), ('Asia/Khandyga', 'Asia/Khandyga'), ('Asia/Kolkata', 'Asia/Kolkata'), ('Asia/Krasnoyarsk', 'Asia/Krasnoyarsk'), ('Asia/Kuala_Lumpur', 'Asia/Kuala_Lumpur'), ('Asia/Kuching', 'Asia/Kuching'), ('Asia/Kuwait', 'Asia/Kuwait'), ('Asia/Macau', 'Asia/Macau'), ('Asia/Magadan', 'Asia/Magadan'), ('Asia/Makassar', 'Asia/Makassar'), ('Asia/Manila', 'Asia/Manila'), ('Asia/Muscat', 'Asia/Muscat'), ('Asia/Nicosia', 'Asia/Nicosia'), ('Asia/Novokuznetsk', 'Asia/Novokuznetsk'), ('Asia/Novosibirsk', 'Asia/Novosibirsk'), ('Asia/Omsk', 'Asia/Omsk'), ('Asia/Oral', 'Asia/Oral'), ('Asia/Phnom_Penh', 'Asia/Phnom_Penh'), ('Asia/Pontianak', 'Asia/Pontianak'), ('Asia/Pyongyang', 'Asia/Pyongyang'), ('Asia/Qatar', 'Asia/Qatar'), ('Asia/Qostanay', 'Asia/Qostanay'), ('Asia/Qyzylorda', 'Asia/Qyzylorda'), ('Asia/Riyadh', 'Asia/Riyadh'), ('Asia/Sakhalin', 'Asia/Sakhalin'), ('Asia/Samarkand', 'Asia/Samarkand'), ('Asia/Seoul', 'Asia/Seoul'), ('Asia/Shanghai', 'Asia/Shanghai'), ('Asia/Singapore', 'Asia/Singapore'), ('Asia/Srednekolymsk', 'Asia/Srednekolymsk'), ('Asia/Taipei', 'Asia/Taipei'), ('Asia/Tashkent', 'Asia/Tashkent'), ('Asia/Tbilisi', 'Asia/Tbilisi'), ('Asia/Tehran', 'Asia/Tehran'), ('Asia/Thimphu', 'Asia/Thimphu'), ('Asia/Tokyo', 'Asia/Tokyo'), ('Asia/Tomsk', 'Asia/Tomsk'), ('Asia/Ulaanbaatar', 'Asia/Ulaanbaatar'), ('Asia/Urumqi', 'Asia/Urumqi'), ('Asia/Ust-Nera', 'Asia/Ust-Nera'), ('Asia/Vientiane', 'Asia/Vientiane'), ('Asia/Vladivostok', 'Asia/Vladivostok'), ('Asia/Yakutsk', 'Asia/Yakutsk'), ('Asia/Yangon', 'Asia/Yangon'), ('Asia/Yekaterinburg', 'Asia/Yekaterinburg'), ('Asia/Yerevan', 'Asia/Yerevan'), ('Atlantic/Azores', 'Atlantic/Azores'), ('Atlantic/Bermuda', 'Atlantic/Bermuda'), ('Atlantic/Canary', 'Atlantic/Canary'), ('Atlantic/Cape_Verde', 'Atlantic/Cape_Verde'), ('Atlantic/Faroe', 'Atlantic/Faroe'), ('Atlantic/Madeira', 'Atlantic/Madeira'), ('Atlantic/Reykjavik', 'Atlantic/Reykjavik'), ('Atlantic/South_Georgia', 'Atlantic/South_Georgia'), ('Atlantic/St_Helena', 'Atlantic/St_Helena'), ('Atlantic/Stanley', 'Atlantic/Stanley'), ('Australia/Adelaide', 'Australia/Adelaide'), ('Australia/Brisbane', 'Australia/Brisbane'), ('Australia/Broken_Hill', 'Australia/Broken_Hill'), ('Australia/Currie', 'Australia/Currie'), ('Australia/Darwin', 'Australia/Darwin'), ('Australia/Eucla', 'Australia/Eucla'), ('Australia/Hobart', 'Australia/Hobart'), ('Australia/Lindeman', 'Australia/Lindeman'), ('Australia/Lord_Howe', 'Australia/Lord_Howe'), ('Australia/Melbourne', 'Australia/Melbourne'), ('Australia/Perth', 'Australia/Perth'), ('Australia/Sydney', 'Australia/Sydney'), ('Canada/Atlantic', 'Canada/Atlantic'), ('Canada/Central', 'Canada/Central'), ('Canada/Eastern', 'Canada/Eastern'), ('Canada/Mountain', 'Canada/Mountain'), ('Canada/Newfoundland', 'Canada/Newfoundland'), ('Canada/Pacific', 'Canada/Pacific'), ('Europe/Amsterdam', 'Europe/Amsterdam'), ('Europe/Andorra', 'Europe/Andorra'), ('Europe/Astrakhan', 'Europe/Astrakhan'), ('Europe/Athens', 'Europe/Athens'), ('Europe/Belgrade', 'Europe/Belgrade'), ('Europe/Berlin', 'Europe/Berlin'), ('Europe/Bratislava', 'Europe/Bratislava'), ('Europe/Brussels', 'Europe/Brussels'), ('Europe/Bucharest', 'Europe/Bucharest'), ('Europe/Budapest', 'Europe/Budapest'), ('Europe/Busingen', 'Europe/Busingen'), ('Europe/Chisinau', 'Europe/Chisinau'), ('Europe/Copenhagen', 'Europe/Copenhagen'), ('Europe/Dublin', 'Europe/Dublin'), ('Europe/Gibraltar', 'Europe/Gibraltar'), ('Europe/Guernsey', 'Europe/Guernsey'), ('Europe/Helsinki', 'Europe/Helsinki'), ('Europe/Isle_of_Man', 'Europe/Isle_of_Man'), ('Europe/Istanbul', 'Europe/Istanbul'), ('Europe/Jersey', 'Europe/Jersey'), ('Europe/Kaliningrad', 'Europe/Kaliningrad'), ('Europe/Kiev', 'Europe/Kiev'), ('Europe/Kirov', 'Europe/Kirov'), ('Europe/Lisbon', 'Europe/Lisbon'), ('Europe/Ljubljana', 'Europe/Ljubljana'), ('Europe/London', 'Europe/London'), ('Europe/Luxembourg', 'Europe/Luxembourg'), ('Europe/Madrid', 'Europe/Madrid'), ('Europe/Malta', 'Europe/Malta'), ('Europe/Mariehamn', 'Europe/Mariehamn'), ('Europe/Minsk', 'Europe/Minsk'), ('Europe/Monaco', 'Europe/Monaco'), ('Europe/Moscow', 'Europe/Moscow'), ('Europe/Oslo', 'Europe/Oslo'), ('Europe/Paris', 'Europe/Paris'), ('Europe/Podgorica', 'Europe/Podgorica'), ('Europe/Prague', 'Europe/Prague'), ('Europe/Riga', 'Europe/Riga'), ('Europe/Rome', 'Europe/Rome'), ('Europe/Samara', 'Europe/Samara'), ('Europe/San_Marino', 'Europe/San_Marino'), ('Europe/Sarajevo', 'Europe/Sarajevo'), ('Europe/Saratov', 'Europe/Saratov'), ('Europe/Simferopol', 'Europe/Simferopol'), ('Europe/Skopje', 'Europe/Skopje'), ('Europe/Sofia', 'Europe/Sofia'), ('Europe/Stockholm', 'Europe/Stockholm'), ('Europe/Tallinn', 'Europe/Tallinn'), ('Europe/Tirane', 'Europe/Tirane'), ('Europe/Ulyanovsk', 'Europe/Ulyanovsk'), ('Europe/Uzhgorod', 'Europe/Uzhgorod'), ('Europe/Vaduz', 'Europe/Vaduz'), ('Europe/Vatican', 'Europe/Vatican'), ('Europe/Vienna', 'Europe/Vienna'), ('Europe/Vilnius', 'Europe/Vilnius'), ('Europe/Volgograd', 'Europe/Volgograd'), ('Europe/Warsaw', 'Europe/Warsaw'), ('Europe/Zagreb', 'Europe/Zagreb'), ('Europe/Zaporozhye', 'Europe/Zaporozhye'), ('Europe/Zurich', 'Europe/Zurich'), ('GMT', 'GMT'), ('Indian/Antananarivo', 'Indian/Antananarivo'), ('Indian/Chagos', 'Indian/Chagos'), ('Indian/Christmas', 'Indian/Christmas'), ('Indian/Cocos', 'Indian/Cocos'), ('Indian/Comoro', 'Indian/Comoro'), ('Indian/Kerguelen', 'Indian/Kerguelen'), ('Indian/Mahe', 'Indian/Mahe'), ('Indian/Maldives', 'Indian/Maldives'), ('Indian/Mauritius', 'Indian/Mauritius'), ('Indian/Mayotte', 'Indian/Mayotte'), ('Indian/Reunion', 'Indian/Reunion'), ('Pacific/Apia', 'Pacific/Apia'), ('Pacific/Auckland', 'Pacific/Auckland'), ('Pacific/Bougainville', 'Pacific/Bougainville'), ('Pacific/Chatham', 'Pacific/Chatham'), ('Pacific/Chuuk', 'Pacific/Chuuk'), ('Pacific/Easter', 'Pacific/Easter'), ('Pacific/Efate', 'Pacific/Efate'), ('Pacific/Enderbury', 'Pacific/Enderbury'), ('Pacific/Fakaofo', 'Pacific/Fakaofo'), ('Pacific/Fiji', 'Pacific/Fiji'), ('Pacific/Funafuti', 'Pacific/Funafuti'), ('Pacific/Galapagos', 'Pacific/Galapagos'), ('Pacific/Gambier', 'Pacific/Gambier'), ('Pacific/Guadalcanal', 'Pacific/Guadalcanal'), ('Pacific/Guam', 'Pacific/Guam'), ('Pacific/Honolulu', 'Pacific/Honolulu'), ('Pacific/Kiritimati', 'Pacific/Kiritimati'), ('Pacific/Kosrae', 'Pacific/Kosrae'), ('Pacific/Kwajalein', 'Pacific/Kwajalein'), ('Pacific/Majuro', 'Pacific/Majuro'), ('Pacific/Marquesas', 'Pacific/Marquesas'), ('Pacific/Midway', 'Pacific/Midway'), ('Pacific/Nauru', 'Pacific/Nauru'), ('Pacific/Niue', 'Pacific/Niue'), ('Pacific/Norfolk', 'Pacific/Norfolk'), ('Pacific/Noumea', 'Pacific/Noumea'), ('Pacific/Pago_Pago', 'Pacific/Pago_Pago'), ('Pacific/Palau', 'Pacific/Palau'), ('Pacific/Pitcairn', 'Pacific/Pitcairn'), ('Pacific/Pohnpei', 'Pacific/Pohnpei'), ('Pacific/Port_Moresby', 'Pacific/Port_Moresby'), ('Pacific/Rarotonga', 'Pacific/Rarotonga'), ('Pacific/Saipan', 'Pacific/Saipan'), ('Pacific/Tahiti', 'Pacific/Tahiti'), ('Pacific/Tarawa', 'Pacific/Tarawa'), ('Pacific/Tongatapu', 'Pacific/Tongatapu'), ('Pacific/Wake', 'Pacific/Wake'), ('Pacific/Wallis', 'Pacific/Wallis'), ('US/Alaska', 'US/Alaska'), ('US/Arizona', 'US/Arizona'), ('US/Central', 'US/Central'), ('US/Eastern', 'US/Eastern'), ('US/Hawaii', 'US/Hawaii'), ('US/Mountain', 'US/Mountain'), ('US/Pacific', 'US/Pacific'), ('UTC', 'UTC')], help_text='In which timezone, is the device located. The device sends an unaware timestamp. So, this timezone will be used to aware the timestamp.', max_length=100)),
            ],
            options={
                'ordering': ('-created_at', '-modified_at'),
                'abstract': False,
            },
            bases=(models.Model, irhrs.core.mixins.model_diff.ModelDiffMixin),
        ),
        migrations.CreateModel(
            name='AttendanceUserMap',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('bio_user_id', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='BreakOutPenaltySetting',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('reduction_type', models.CharField(choices=[('leave', 'Leave'), ('payroll', 'Payroll')], help_text='\n        If reduction_type(leave) is selected, \n            And for example, leave_type_to_reduce(casual leave) is selected;\n            will reduce penalty_duration_in_days(0.5),\n            for every tolerated_duration_in_minutes(3 hours).\n            Resets counter every penalty_counter_value(15) penalty_counter_unit(days)\n            Can either select <28 days, any more than that, need to select month.\n        If reduction_type(payroll) is selected, or not enough casual leave;\n            Leave Balance is not touched, rather unpaid_leave_days value is sent to payroll.\n        ', max_length=20)),
                ('tolerated_duration_in_minutes', models.PositiveIntegerField(help_text='Threshold: Break-outs that do not exceed this value, is considered grace.', validators=[django.core.validators.MinValueValidator(limit_value=0)])),
                ('penalty_duration_in_days', models.FloatField(help_text='How many to reduce from payroll/leave?', validators=[django.core.validators.MinValueValidator(limit_value=0)])),
                ('penalty_counter_value', models.PositiveIntegerField(help_text='Resets every? Take it as: 1 month, or every 3 days, regularly late.', validators=[django.core.validators.MinValueValidator(limit_value=0)])),
                ('penalty_counter_unit', models.CharField(choices=[('days', 'Days'), ('month', 'Month')], max_length=20)),
                ('consider_late_in', models.BooleanField(default=True)),
                ('consider_early_out', models.BooleanField(default=True)),
                ('consider_in_between_breaks', models.BooleanField(default=False)),
                ('penalty_accumulates', models.BooleanField(default=True, help_text='If false: 100 hours results in 10 times 10 hour scheme.')),
            ],
            options={
                'ordering': ('-created_at', '-modified_at'),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='BreakOutUserRecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField(null=True)),
                ('loss_accumulated', models.DurationField()),
                ('penalty_accumulated', models.FloatField()),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('verified', 'Verified'), ('processed', 'Processed')], default='pending', max_length=12)),
                ('remarks', models.CharField(blank=True, max_length=255)),
            ],
            options={
                'ordering': ('-created_at', '-modified_at'),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='BreakOutUserRecordStatusHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('verified', 'Verified'), ('processed', 'Processed')], max_length=12)),
                ('remarks', models.CharField(max_length=255)),
            ],
            options={
                'ordering': ('-created_at', '-modified_at'),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CreditHourDeleteRequest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('request_remarks', models.CharField(max_length=255)),
                ('action_remarks', models.CharField(max_length=255)),
                ('status', models.CharField(choices=[('Requested', 'Requested'), ('Forwarded', 'Forwarded'), ('Cancelled', 'Cancelled'), ('Approved', 'Approved'), ('Declined', 'Declined')], default='Requested', max_length=30)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CreditHourDeleteRequestHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('action_performed', models.CharField(choices=[('Requested', 'Requested'), ('Forwarded', 'Forwarded'), ('Cancelled', 'Cancelled'), ('Approved', 'Approved'), ('Declined', 'Declined')], max_length=30)),
                ('remarks', models.CharField(max_length=255)),
            ],
            options={
                'ordering': ('-created_at', '-modified_at'),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CreditHourRequest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('request_remarks', models.CharField(max_length=255)),
                ('action_remarks', models.CharField(max_length=255)),
                ('status', models.CharField(choices=[('Requested', 'Requested'), ('Forwarded', 'Forwarded'), ('Cancelled', 'Cancelled'), ('Approved', 'Approved'), ('Declined', 'Declined')], default='Requested', max_length=30)),
                ('credit_hour_duration', models.DurationField(help_text='The duration user wants to request for.')),
                ('credit_hour_date', models.DateField(help_text='The day where user wants to request for credit hours.')),
                ('is_deleted', models.NullBooleanField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CreditHourRequestHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('action_performed', models.CharField(choices=[('Unclaimed', 'Unclaimed'), ('Requested', 'Requested'), ('Forwarded', 'Forwarded'), ('Approved', 'Approved'), ('Declined', 'Declined'), ('Confirmed', 'Confirmed')], max_length=30)),
                ('remarks', models.CharField(max_length=255)),
            ],
            options={
                'ordering': ('-created_at', '-modified_at'),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CreditHourSetting',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('slug', models.SlugField(blank=True, max_length=255, unique=True)),
                ('name', models.CharField(max_length=150, validators=[irhrs.core.validators.validate_title])),
                ('minimum_credit_request', models.DurationField(help_text='Eg: User can not request less than 15 minutes.')),
                ('daily_credit_hour_limit_applicable', models.NullBooleanField(help_text='Flag for daily_credit_hour_limit is applicable in system.')),
                ('daily_credit_hour_limit', models.PositiveSmallIntegerField(help_text='Usage: A employee can not work more than 3 hrs credit in any day.', null=True, validators=[irhrs.attendance.utils.validators.validate_daily_overtime_limit])),
                ('weekly_credit_hour_limit_applicable', models.NullBooleanField(help_text='Flag for weekly_credit_hour_limit is applicable in system.')),
                ('weekly_credit_hour_limit', models.PositiveSmallIntegerField(help_text='Usage: A employee can not work more than 10 hrs credit in any week.', null=True, validators=[irhrs.attendance.utils.validators.validate_weekly_overtime_limit])),
                ('monthly_credit_hour_limit_applicable', models.NullBooleanField(help_text='Flag for monthly_credit_hour_limit is applicable in system.')),
                ('monthly_credit_hour_limit', models.PositiveSmallIntegerField(help_text='Usage: A employee can not work more than 40 hrs credit in any month.', null=True)),
                ('off_day_credit_hour', models.BooleanField(default=False)),
                ('off_day_credit_hour_limit', models.PositiveSmallIntegerField(null=True, validators=[irhrs.attendance.utils.validators.validate_off_day_overtime_limit])),
                ('holiday_credit_hour', models.BooleanField(default=False)),
                ('holiday_credit_hour_limit', models.PositiveSmallIntegerField(null=True, validators=[irhrs.attendance.utils.validators.validate_off_day_overtime_limit])),
                ('credit_hour_calculation', models.PositiveSmallIntegerField(choices=[(1, 'Daily'), (2, 'Weekly'), (3, 'Monthly')], help_text='At the end of day? week? month? to append the earned balance to leave.')),
                ('is_archived', models.BooleanField(default=False, help_text='Archiving a credit hour setting will not be assignable to employees.Use it when no longer applicable to org policy. Keep for past computed data.')),
                ('deduct_credit_hour_after_for', models.CharField(choices=[('punch_in', 'Punch In Only'), ('punch_out', 'Punch Out Only'), ('both', 'Both'), ('neither', 'Neither')], default='neither', help_text='Generate credit to calculate only after criteria deductedEg: If `True`: 16 min will calculate 1 min; if `False`, will generate 16', max_length=20)),
                ('flat_reject_value', models.PositiveSmallIntegerField(default=0, help_text='The total overtime less than this value will be rejected')),
                ('credit_hour_expires', models.NullBooleanField()),
                ('expires_after', models.PositiveSmallIntegerField(null=True)),
                ('expires_after_unit', models.CharField(blank=True, choices=[('d', 'Days'), ('m', 'Months'), ('y', 'Years')], max_length=1)),
                ('require_prior_approval', models.NullBooleanField(help_text='Prior Approval is a flag to ignore overtime from being created by default. Settings with this flag will be excluded from default logic of creating credit hours.')),
                ('grant_overtime_for_exceeded_minutes', models.NullBooleanField(db_column='compensatory_time_off', help_text='If enabled; will grant exceeded overtime to CompensatoryTimeOff.')),
                ('reduce_credit_if_actual_credit_lt_approved_credit', models.NullBooleanField(db_column='min_worked_approved', help_text='Expanded: Reduce Overtime If Actual Overtime is Less Than Approved Overtime. FUNC: MIN(worked_hours, approved_hours)')),
                ('allow_edit_of_pre_approved_credit_hour', models.NullBooleanField(db_column='editable_pre_approved_credit_hrs', help_text='If ON; Allows Pre Approved OT to be edited and re-flowed.If OFF; Pre Approved OT is Finalized.')),
            ],
        ),
        migrations.CreateModel(
            name='CreditHourTimeSheetEntry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('earned_credit_hours', models.DurationField()),
                ('consumed_credit_hours', models.DurationField(help_text='This tracks down which credit hour to consume first.', null=True)),
                ('status', models.CharField(choices=[('Unclaimed', 'Unclaimed'), ('Requested', 'Requested'), ('Forwarded', 'Forwarded'), ('Approved', 'Approved'), ('Declined', 'Declined'), ('Confirmed', 'Confirmed')], default='Requested', max_length=30)),
                ('is_archived', models.NullBooleanField()),
            ],
            options={
                'ordering': ('-created_at', '-modified_at'),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='IndividualAttendanceSetting',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('web_attendance', models.BooleanField(default=False)),
                ('late_in_notification_email', models.BooleanField(default=False)),
                ('absent_notification_email', models.BooleanField(default=False)),
                ('enable_overtime', models.BooleanField(default=False)),
                ('overtime_remainder_email', models.BooleanField(default=False)),
                ('enable_credit_hour', models.BooleanField(default=False)),
                ('is_disabled', models.BooleanField(default=False)),
                ('enable_hr_notification', models.BooleanField(default=False)),
                ('enable_approval', models.BooleanField(default=False)),
            ],
            options={
                'ordering': ('-created_at', '-modified_at'),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='IndividualUserShift',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('applicable_from', models.DateField(default=irhrs.attendance.models.attendance.get_tomorrows_date)),
                ('applicable_to', models.DateField(blank=True, null=True)),
            ],
            options={
                'ordering': ('-created_at',),
            },
        ),
        migrations.CreateModel(
            name='IndividualWorkingHour',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('applicable_from', models.DateField(default=irhrs.attendance.models.attendance.get_tomorrows_date)),
                ('applicable_to', models.DateField(blank=True, null=True)),
                ('working_hours', models.PositiveIntegerField()),
                ('working_hours_duration', models.CharField(choices=[('Daily', 'Daily'), ('Weekly', 'Weekly'), ('Monthly', 'Monthly')], max_length=10)),
            ],
            options={
                'ordering': ('-created_at',),
            },
        ),
        migrations.CreateModel(
            name='OvertimeClaim',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('status', models.CharField(choices=[('Unclaimed', 'Unclaimed'), ('Requested', 'Requested'), ('Forwarded', 'Forwarded'), ('Approved', 'Approved'), ('Declined', 'Declined'), ('Confirmed', 'Confirmed')], max_length=15, null=True)),
                ('description', models.CharField(max_length=255)),
                ('is_archived', models.BooleanField(default=False)),
            ],
            options={
                'ordering': ('-created_at', '-modified_at'),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='OvertimeClaimHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('action_performed', models.CharField(choices=[('Unclaimed', 'Unclaimed'), ('Requested', 'Requested'), ('Forwarded', 'Forwarded'), ('Approved', 'Approved'), ('Declined', 'Declined'), ('Confirmed', 'Confirmed')], max_length=15)),
                ('remark', models.CharField(max_length=255)),
            ],
            options={
                'ordering': ('-created_at', '-modified_at'),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='OvertimeEntry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ('-created_at', '-modified_at'),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='OvertimeEntryDetail',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('punch_in_overtime', models.DurationField()),
                ('punch_out_overtime', models.DurationField()),
                ('claimed_overtime', models.DurationField(null=True)),
                ('normalized_overtime', models.DurationField(null=True)),
            ],
            options={
                'ordering': ('-created_at', '-modified_at'),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='OvertimeEntryDetailHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('previous_punch_in_overtime', models.DurationField()),
                ('previous_punch_out_overtime', models.DurationField()),
                ('current_punch_in_overtime', models.DurationField()),
                ('current_punch_out_overtime', models.DurationField()),
                ('remarks', models.CharField(max_length=200)),
            ],
            options={
                'ordering': ('-created_at', '-modified_at'),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='OvertimeRate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('overtime_after', models.PositiveSmallIntegerField()),
                ('rate', models.FloatField()),
                ('rate_type', models.CharField(choices=[('Holiday', 'Holiday'), ('Offday', 'Offday'), ('Workday', 'Workday'), ('Leave', 'Leave')], default='Workday', max_length=25)),
            ],
        ),
        migrations.CreateModel(
            name='OvertimeSetting',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('slug', models.SlugField(blank=True, max_length=255, unique=True)),
                ('name', models.CharField(max_length=150, validators=[irhrs.core.validators.validate_title])),
                ('daily_overtime_limit_applicable', models.NullBooleanField(help_text='Flag for daily_overtime_limit is applicable in system.')),
                ('daily_overtime_limit', models.PositiveSmallIntegerField(help_text='Usage: A employee can not work more than 3 hrs overtime in any day.', null=True, validators=[irhrs.attendance.utils.validators.validate_daily_overtime_limit])),
                ('weekly_overtime_limit_applicable', models.NullBooleanField(help_text='Flag for weekly_overtime_limit is applicable in system.')),
                ('weekly_overtime_limit', models.PositiveSmallIntegerField(help_text='Usage: A employee can not work more than 10 hrs overtime in any week.', null=True, validators=[irhrs.attendance.utils.validators.validate_weekly_overtime_limit])),
                ('monthly_overtime_limit_applicable', models.NullBooleanField(help_text='Flag for monthly_overtime_limit is applicable in system.')),
                ('monthly_overtime_limit', models.PositiveSmallIntegerField(help_text='Usage: A employee can not work more than 40 hrs overtime in any month.', null=True, validators=[irhrs.attendance.utils.validators.validate_monthly_overtime_limit])),
                ('off_day_overtime', models.BooleanField(default=False)),
                ('off_day_overtime_limit', models.PositiveSmallIntegerField(null=True, validators=[irhrs.attendance.utils.validators.validate_off_day_overtime_limit])),
                ('applicable_before', models.PositiveSmallIntegerField(validators=[irhrs.attendance.utils.validators.validate_overtime_delta])),
                ('applicable_after', models.PositiveSmallIntegerField(validators=[irhrs.attendance.utils.validators.validate_overtime_delta])),
                ('overtime_calculation', models.PositiveSmallIntegerField(choices=[(1, 'Daily'), (2, 'Weekly')])),
                ('paid_holiday_affect_overtime', models.BooleanField(default=True)),
                ('holiday_overtime_limit', models.PositiveSmallIntegerField(null=True, validators=[irhrs.attendance.utils.validators.validate_off_day_overtime_limit])),
                ('leave_affect_overtime', models.BooleanField(default=True)),
                ('leave_overtime_limit', models.PositiveSmallIntegerField(null=True, validators=[irhrs.attendance.utils.validators.validate_off_day_overtime_limit])),
                ('is_archived', models.BooleanField(default=False)),
                ('overtime_applicable_only_after', models.CharField(choices=[('both', 'Both'), ('either', 'Either')], default='both', max_length=20)),
                ('deduct_overtime_after_for', models.CharField(choices=[('punch_in', 'Punch In Only'), ('punch_out', 'Punch Out Only'), ('both', 'Both'), ('neither', 'Neither')], default='neither', help_text='Generate overtime to calculate only after criteria deducted', max_length=20)),
                ('overtime_after_offday', models.CharField(choices=[('both', 'Generate Both'), ('deduction', 'Generate After Deduction'), ('no', 'No Overtime')], db_column='overtime_compensatory', default='both', help_text='Deduct the hours consumed by compensatory leave and generate overtime', max_length=20)),
                ('overtime_after_holiday', models.CharField(choices=[('both', 'Generate Both'), ('deduction', 'Generate After Deduction'), ('no', 'No Overtime')], db_column='overtime_holiday', default='both', help_text='Deduct the hours consumed by compensatory leave and generate overtime for holiday.', max_length=20)),
                ('require_dedicated_work_time', models.BooleanField(db_column='dedicated_required', default=True, help_text='If `ON`: Late-in, Late-out may not generate OT. Check only if the user must work dedicated minutes in his/her shift.')),
                ('flat_reject_value', models.PositiveSmallIntegerField(default=0, help_text='The total overtime less than this value will be rejected')),
                ('claim_expires', models.BooleanField(default=False)),
                ('expires_after', models.PositiveSmallIntegerField(null=True)),
                ('expires_after_unit', models.CharField(blank=True, choices=[('d', 'Days'), ('m', 'Months'), ('y', 'Years')], max_length=1)),
                ('require_prior_approval', models.NullBooleanField(help_text='Prior Approval is a flag to ignore overtime from being created by default. Settings with this flag will be excluded from default logic of creating overtime.')),
                ('require_post_approval_of_pre_approved_overtime', models.NullBooleanField(db_column='require_post_approval', help_text='If Enabled: pre-approved overtime have to be Requested/Approved again.If Disabled: generated overtime min(allowed, earned) shall automatically be approved.')),
                ('grant_compensatory_time_off_for_exceeded_minutes', models.NullBooleanField(db_column='compensatory_time_off', help_text='If enabled; will grant exceeded overtime to CompensatoryTimeOff.')),
                ('reduce_ot_if_actual_ot_lt_approved_ot', models.NullBooleanField(db_column='min_worked_approved', help_text='Expanded: Reduce Overtime If Actual Overtime is Less Than Approved Overtime. FUNC: MIN(worked_hours, approved_hours)')),
                ('allow_edit_of_pre_approved_overtime', models.NullBooleanField(db_column='editable_pre_approved_overtime', help_text='If ON; Allows Pre Approved OT to be edited and re-flowed.If OFF; Pre Approved OT is Finalized.')),
                ('minimum_request_duration', models.DurationField(help_text='Requests below this limit can not be requested.', null=True)),
            ],
            options={
                'ordering': ('-created_at', '-modified_at'),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PreApprovalOvertime',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('request_remarks', models.CharField(max_length=255)),
                ('action_remarks', models.CharField(max_length=255)),
                ('status', models.CharField(choices=[('Requested', 'Requested'), ('Forwarded', 'Forwarded'), ('Approved', 'Approved'), ('Declined', 'Declined'), ('Cancelled', 'Cancelled')], default='Requested', max_length=30)),
                ('overtime_duration', models.DurationField(help_text='The duration user wants to stay in overtime.')),
                ('overtime_date', models.DateField(help_text='The day where user wants to stay in overtime.')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PreApprovalOvertimeHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('action_performed', models.CharField(choices=[('Unclaimed', 'Unclaimed'), ('Requested', 'Requested'), ('Forwarded', 'Forwarded'), ('Approved', 'Approved'), ('Declined', 'Declined'), ('Confirmed', 'Confirmed')], max_length=30)),
                ('remarks', models.CharField(max_length=255)),
            ],
            options={
                'ordering': ('-created_at', '-modified_at'),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TimeSheet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('timesheet_for', models.DateField()),
                ('coefficient', models.PositiveSmallIntegerField(choices=[(3, 'Holiday'), (2, 'Offday'), (1, 'Workday')], default=1)),
                ('expected_punch_in', models.DateTimeField(blank=True, null=True)),
                ('punch_in', models.DateTimeField(blank=True, null=True)),
                ('expected_punch_out', models.DateTimeField(blank=True, null=True)),
                ('punch_out', models.DateTimeField(blank=True, null=True)),
                ('punch_in_delta', models.DurationField(blank=True, null=True)),
                ('punch_out_delta', models.DurationField(blank=True, null=True)),
                ('is_present', models.BooleanField(default=False)),
                ('leave_coefficient', models.CharField(choices=[('First Half', 'First Half'), ('Second Half', 'Second Half'), ('Full Leave', 'Full Leave'), ('No Leave', 'No Leave')], default='No Leave', max_length=20)),
                ('hour_off_coefficient', models.CharField(blank=True, choices=[('Time Off', 'Time Off'), ('Credit Hour', 'Credit Hour'), ('credit-time-off', 'Credit Hour & Time Off')], help_text='Indication of Time Off or Credit Hour Used.', max_length=20)),
                ('punctuality', models.FloatField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='TimeSheetApproval',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('status', models.CharField(choices=[('Requested', 'Requested'), ('Forwarded', 'Forwarded'), ('Approved', 'Approved'), ('Declined', 'Declined')], default='Requested', max_length=16)),
            ],
            options={
                'ordering': ('-created_at', '-modified_at'),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TimeSheetEntry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('timestamp', models.DateTimeField()),
                ('entry_method', models.CharField(choices=[('Device', 'Device'), ('Web App', 'Web App'), ('Mobile App', 'Mobile App'), ('RFID Card', 'RFID Card'), ('Password', 'Password'), ('Att Adjustment', 'Attendance Adjustment'), ('Other', 'Other'), ('Import', 'Import'), ('Travel Att', 'Travel Attendance')], max_length=15, null=True)),
                ('entry_type', models.CharField(choices=[('Punch In', 'Punch In'), ('Punch Out', 'Punch Out'), ('Break In', 'Break In'), ('Break Out', 'Break Out'), ('Unknown', 'Unknown')], db_index=True, max_length=15, null=True)),
                ('category', models.CharField(choices=[('Uncategorized', 'Uncategorized'), ('Early In', 'Early In'), ('Timely In', 'Timely In'), ('Late In', 'Late In'), ('Early Out', 'Early Out'), ('Timely Out', 'Timely Out'), ('Late Out', 'Late Out')], default='Uncategorized', max_length=15)),
                ('remark_category', models.CharField(choices=[('Tea Break', 'Tea Break'), ('Client Visit', 'Client Visit'), ('Lunch Break', 'Lunch Break'), ('Meeting', 'Meeting'), ('Others', 'Others'), ('Punch In', 'Punch In'), ('Punch Out', 'Punch Out')], db_index=True, default='Others', max_length=30)),
                ('remarks', models.CharField(blank=True, default='', max_length=255)),
                ('latitude', models.FloatField(blank=True, null=True, validators=[irhrs.core.validators.MinMaxValueValidator(max_value=90, min_value=-90)])),
                ('longitude', models.FloatField(blank=True, null=True, validators=[irhrs.core.validators.MinMaxValueValidator(max_value=180, min_value=-180)])),
                ('is_deleted', models.BooleanField(default=False)),
            ],
            options={
                'ordering': ('-created_at', '-modified_at'),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TimeSheetEntryApproval',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('status', models.CharField(choices=[('Requested', 'Requested'), ('Forwarded', 'Forwarded'), ('Approved', 'Approved'), ('Declined', 'Declined')], default='Requested', max_length=10)),
                ('timestamp', models.DateTimeField()),
                ('entry_method', models.CharField(choices=[('Device', 'Device'), ('Web App', 'Web App'), ('Mobile App', 'Mobile App'), ('RFID Card', 'RFID Card'), ('Password', 'Password'), ('Att Adjustment', 'Attendance Adjustment'), ('Other', 'Other'), ('Import', 'Import'), ('Travel Att', 'Travel Attendance')], max_length=15, null=True)),
                ('entry_type', models.CharField(choices=[('Punch In', 'Punch In'), ('Punch Out', 'Punch Out'), ('Break In', 'Break In'), ('Break Out', 'Break Out'), ('Unknown', 'Unknown')], db_index=True, max_length=15, null=True)),
                ('category', models.CharField(choices=[('Uncategorized', 'Uncategorized'), ('Early In', 'Early In'), ('Timely In', 'Timely In'), ('Late In', 'Late In'), ('Early Out', 'Early Out'), ('Timely Out', 'Timely Out'), ('Late Out', 'Late Out')], default='Uncategorized', max_length=15)),
                ('remark_category', models.CharField(choices=[('Tea Break', 'Tea Break'), ('Client Visit', 'Client Visit'), ('Lunch Break', 'Lunch Break'), ('Meeting', 'Meeting'), ('Others', 'Others'), ('Punch In', 'Punch In'), ('Punch Out', 'Punch Out')], db_index=True, default='Others', max_length=30)),
                ('remarks', models.CharField(blank=True, default='', max_length=255)),
                ('latitude', models.FloatField(blank=True, null=True, validators=[irhrs.core.validators.MinMaxValueValidator(max_value=90, min_value=-90)])),
                ('longitude', models.FloatField(blank=True, null=True, validators=[irhrs.core.validators.MinMaxValueValidator(max_value=180, min_value=-180)])),
            ],
            options={
                'ordering': ('-created_at', '-modified_at'),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TimeSheetRegistrationReportSettings',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('headers', django.contrib.postgres.fields.jsonb.JSONField(help_text='Header field to display name map')),
                ('primary_legend', django.contrib.postgres.fields.jsonb.JSONField(help_text='Primary legend configuration')),
                ('leave_legend', django.contrib.postgres.fields.jsonb.JSONField()),
                ('approval_required', models.BooleanField(default=False, help_text='When true, will generate this report on first day of next month and send for approval.')),
                ('fiscal_year_category', models.CharField(choices=[('global', 'Global'), ('leave', 'Leave')], help_text='When approval required is set, choose fiscal year type to use while selecting 1st day of month.', max_length=32, null=True)),
                ('worked_hours_ceil_limit', models.IntegerField(default=30, help_text='If minutes in worked duration reaches this limit, one will be added in worked hours. ', validators=[django.core.validators.MaxValueValidator(limit_value=59), django.core.validators.MinValueValidator(limit_value=1)])),
            ],
            options={
                'ordering': ('-created_at', '-modified_at'),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TimeSheetReportRequest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('status', models.CharField(choices=[('Generated', 'Generated'), ('Requested', 'Requested'), ('Approved', 'Approved'), ('Forwarded', 'Forwarded'), ('Confirmed', 'Confirmed'), ('Declined', 'Declined')], max_length=50)),
                ('report_data', django.contrib.postgres.fields.jsonb.JSONField()),
                ('settings_data', django.contrib.postgres.fields.jsonb.JSONField()),
                ('month_name', models.CharField(max_length=50)),
                ('month_from_date', models.DateField()),
                ('month_to_date', models.DateField()),
                ('year_name', models.CharField(max_length=100)),
                ('year_from_date', models.DateField()),
                ('year_to_date', models.DateField()),
            ],
            options={
                'ordering': ('-created_at', '-modified_at'),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TimeSheetReportRequestHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('action', models.CharField(choices=[('Generated', 'Generated'), ('Requested', 'Requested'), ('Approved', 'Approved'), ('Forwarded', 'Forwarded'), ('Confirmed', 'Confirmed'), ('Declined', 'Declined')], max_length=50)),
                ('attached_signature', models.FileField(null=True, upload_to=irhrs.core.utils.common.get_upload_path)),
                ('remarks', models.TextField(blank=True, max_length=600)),
            ],
            options={
                'ordering': ('-created_at', '-modified_at'),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TravelAttendanceAttachments',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(upload_to=irhrs.core.utils.common.get_upload_path, validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['doc', 'docx', 'odt', 'pdf', 'xls', 'xlsx', 'ods', 'ppt', 'pptx', 'txt', 'tif', 'tiff', 'jif', 'jfif', 'jp2', 'jpx', 'j2k', 'j2c', 'fpx', 'pcd', 'psd', 'rtf', 'gif', 'jpeg', 'jpg', 'png'])])),
                ('filename', models.CharField(max_length=255)),
            ],
            options={
                'ordering': ('filename',),
            },
        ),
        migrations.CreateModel(
            name='TravelAttendanceDays',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('day', models.DateField()),
                ('is_archived', models.BooleanField(default=False)),
                ('processed', models.BooleanField(default=False)),
            ],
            options={
                'ordering': ('created_at',),
            },
        ),
        migrations.CreateModel(
            name='TravelAttendanceDeleteRequest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('request_remarks', models.CharField(max_length=255)),
                ('action_remarks', models.CharField(max_length=255)),
                ('status', models.CharField(choices=[('Requested', 'Requested'), ('Forwarded', 'Forwarded'), ('Approved', 'Approved'), ('Declined', 'Declined'), ('Cancelled', 'Cancelled')], help_text='Status of this travel request.', max_length=20)),
            ],
            options={
                'ordering': ('-created_at', '-modified_at'),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TravelAttendanceDeleteRequestHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('action_performed', models.CharField(choices=[('Requested', 'Requested'), ('Forwarded', 'Forwarded'), ('Approved', 'Approved'), ('Declined', 'Declined'), ('Cancelled', 'Cancelled')], help_text='Status of this travel request.', max_length=20)),
                ('remarks', models.CharField(max_length=255)),
            ],
            options={
                'ordering': ('-created_at', '-modified_at'),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TravelAttendanceRequest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('location', models.CharField(default='', max_length=255)),
                ('start', models.DateField()),
                ('start_time', models.TimeField()),
                ('end', models.DateField()),
                ('end_time', models.TimeField()),
                ('working_time', models.CharField(choices=[('First Half', 'First Half'), ('Second Half', 'Second Half'), ('Full Day', 'Full Day')], default='Full Day', help_text='If the user decides to work first half, second half, or full time.', max_length=20)),
                ('status', models.CharField(choices=[('Requested', 'Requested'), ('Forwarded', 'Forwarded'), ('Approved', 'Approved'), ('Declined', 'Declined'), ('Cancelled', 'Cancelled')], help_text='Status of this travel request.', max_length=20)),
                ('request_remarks', models.CharField(max_length=255)),
                ('action_remarks', models.CharField(max_length=255)),
                ('balance', models.PositiveSmallIntegerField()),
            ],
            options={
                'ordering': ('-created_at', '-modified_at'),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TravelAttendanceRequestHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('status', models.CharField(choices=[('Requested', 'Requested'), ('Forwarded', 'Forwarded'), ('Approved', 'Approved'), ('Declined', 'Declined'), ('Cancelled', 'Cancelled')], help_text='Status of this travel request.', max_length=20)),
                ('remarks', models.CharField(max_length=255)),
            ],
            options={
                'ordering': ('-created_at', '-modified_at'),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TravelAttendanceSetting',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('can_apply_in_offday', models.BooleanField()),
                ('can_apply_in_holiday', models.BooleanField()),
            ],
            options={
                'ordering': ('-created_at', '-modified_at'),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='WebAttendanceFilter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('allow', models.BooleanField(default=True)),
                ('cidr', models.CharField(max_length=18, validators=[irhrs.attendance.utils.validators.validate_CIDR])),
            ],
        ),
        migrations.CreateModel(
            name='WorkDay',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('day', models.PositiveSmallIntegerField(choices=[(1, 'Sunday'), (2, 'Monday'), (3, 'Tuesday'), (4, 'Wednesday'), (5, 'Thursday'), (6, 'Friday'), (7, 'Saturday')])),
                ('applicable_from', models.DateField(default=irhrs.core.utils.common.get_today)),
                ('applicable_to', models.DateField(blank=True, null=True)),
            ],
            options={
                'ordering': ('-created_at', '-modified_at'),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='WorkShift',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('slug', models.SlugField(blank=True, max_length=255, unique=True)),
                ('name', models.CharField(max_length=150)),
                ('start_time_grace', models.DurationField()),
                ('end_time_grace', models.DurationField()),
                ('is_default', models.BooleanField(default=False, help_text='Defines a Default shift for an organization')),
                ('description', models.TextField(blank=True, max_length=600)),
            ],
        ),
        migrations.CreateModel(
            name='WorkTiming',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('start_time', models.TimeField()),
                ('end_time', models.TimeField()),
                ('extends', models.BooleanField(default=False)),
                ('working_minutes', models.PositiveSmallIntegerField()),
            ],
            options={
                'ordering': ('created_at',),
            },
        ),
    ]
