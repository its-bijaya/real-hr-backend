from django.db import transaction
from django.utils import timezone

from irhrs.assessment.models.assessment import QuestionResponse, UserAssessment
from irhrs.assessment.models.helpers import COMPLETED, IN_PROGRESS, PENDING
from irhrs.notification.utils import add_notification
from irhrs.questionnaire.models.helpers import RADIO, CHECKBOX


def unlock_assessment_questions(user_assessment):
    """
    Only Not Started User Assessments can arrive here.
    :param user_assessment: UserAssessment yet to begin.
    :return:
    """
    assessment_set = user_assessment.assessment_set
    # user = user_assessment.user
    # Order sections a/c to section ordering.
    order = 1
    objects = list()
    sections = assessment_set.sections.all()
    for section in sections:
        for question in section.section_questions.all():
            objects.append(
                QuestionResponse(
                    user_assessment=user_assessment,
                    section=section,
                    question=question.question,
                    order=question.order,
                    status=PENDING,
                    is_mandatory=question.is_mandatory
                )
            )
            order += 1
    QuestionResponse.objects.bulk_create(objects)
    # user_assessment.started_at = timezone.now().astimezone()
    # user_assessment.save()
    # Schedule.objects.create(
    #     func='irhrs.assessment.utils.background_tasks.terminate_ongoing_assessment',
    #     args=(user_assessment.id,),
    #     next_run=user_assessment.started_at + assessment_set.duration
    # )


@transaction.atomic()
def score_assessment(assessment_set):
    """
    We have the assessment set,
    the questions come with answer
    score if correct answer is selected.
    """
    final_score = 0
    for question_map in assessment_set.question_responses.filter(
                question__answer_choices__in=[RADIO, CHECKBOX]
    ):
        correct_answer_set = set(
            question_map.question.answers.filter(is_correct=True).values_list(
                'id', flat=True
            )
        )
        user_answer_set = set(
            question_map.answers.values_list('id', flat=True)
        )
        is_correct = correct_answer_set == user_answer_set
        if is_correct:
            question_map.score = question_map.question.weightage
            final_score += question_map.question.weightage
        else:
            question_map.score = 0
    assessment_set.score = final_score
    assessment_set.save()
    add_notification(
        text='Your assessment scores have been calculated.',
        url='/user/assessment/completed',
        recipient=assessment_set.user,
        action=assessment_set
    )


def terminate_ongoing_assessment(user_assessment_id):
    user_assessment = UserAssessment.objects.get(pk=user_assessment_id)
    if user_assessment.status != IN_PROGRESS:
        return
    if user_assessment.end_time <= timezone.now():
        user_assessment.status = COMPLETED
        user_assessment.remarks = "Autogenerated - Time Completed"
    user_assessment.save()
    score_assessment(user_assessment)
