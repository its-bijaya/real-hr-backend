# Generated by Django 2.2.11 on 2021-02-11 10:29

import django.core.validators
from django.db import migrations, models
import irhrs.core.fields.fields
import irhrs.core.utils.common
import irhrs.core.validators


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='RecurringTrainingDate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('recurring_at', models.DateField()),
                ('remarks', models.TextField(blank=True, null=True)),
                ('last_tried', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'ordering': ('-created_at', '-modified_at'),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Trainer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('full_name', models.CharField(help_text='Full name of the trainer.', max_length=255, validators=[irhrs.core.validators.validate_title])),
                ('email', models.EmailField(help_text='Email of the trainer.', max_length=254)),
                ('description', models.TextField(validators=[irhrs.core.validators.validate_wysiwyg_field])),
                ('contact_info', irhrs.core.fields.fields.JSONTextField(help_text='Contact Information of Trainer.\nFormat is {"Phone": "45454545",...}', validators=[irhrs.core.validators.validate_json_contact])),
                ('image', models.ImageField(blank=True, upload_to=irhrs.core.utils.common.get_upload_path)),
            ],
            options={
                'ordering': ('-created_at', '-modified_at'),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TrainerAttachments',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('file', models.FileField(upload_to=irhrs.core.utils.common.get_upload_path)),
            ],
            options={
                'ordering': ('-created_at', '-modified_at'),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Training',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('slug', models.SlugField(blank=True, max_length=255, unique=True)),
                ('name', models.CharField(help_text='Self Explanatory', max_length=255, validators=[irhrs.core.validators.validate_title])),
                ('description', models.TextField(blank=True, help_text='Self Explanatory', validators=[irhrs.core.validators.validate_description])),
                ('image', models.ImageField(blank=True, help_text='Background/Banner for this training.', upload_to=irhrs.core.utils.common.get_upload_path)),
                ('start', models.DateTimeField(help_text='Start Date for this training.')),
                ('end', models.DateTimeField(help_text='Expected End Date for this training.')),
                ('start_time', models.TimeField(help_text='Start time for training', null=True)),
                ('end_time', models.TimeField(help_text='End time for training', null=True)),
                ('nature', models.CharField(choices=[('onsite', 'OnSite'), ('offsite', 'OffSite')], help_text='Where will this training be held?', max_length=10)),
                ('location', models.TextField(help_text='Where will the training be held?')),
                ('budget_allocated', models.FloatField(help_text='The financial weightage of this training.', null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], default='pending', help_text='Training Status: Pending, Completed, In Progress, etc.', max_length=20)),
                ('visibility', models.CharField(choices=[('public', 'Public'), ('private', 'Private')], default='public', help_text='Is this training visible to all users?', max_length=10)),
                ('users_can_apply', models.BooleanField(default=False, help_text='Allow users to send a join request for this training?')),
                ('acceptance_deadline', models.DateTimeField(help_text='If users can apply to this training, when should they apply before?', null=True)),
                ('recurring_rule', models.TextField(blank=True, null=True)),
                ('recurring_first_run', models.DateField(blank=True, null=True)),
                ('average_score', models.FloatField(null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TrainingAttachment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=120, null=True)),
                ('file', models.FileField(upload_to=irhrs.core.utils.common.get_upload_path, validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['doc', 'docx', 'odt', 'pdf', 'xls', 'xlsx', 'ods', 'ppt', 'pptx', 'txt', 'tif', 'tiff', 'jif', 'jfif', 'jp2', 'jpx', 'j2k', 'j2c', 'fpx', 'pcd', 'psd', 'rtf', 'gif', 'jpeg', 'jpg', 'png'])])),
            ],
        ),
        migrations.CreateModel(
            name='TrainingAttachments',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('attachments_remarks', models.TextField(blank=True, validators=[irhrs.core.validators.validate_wysiwyg_field])),
            ],
            options={
                'ordering': ('-created_at', '-modified_at'),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TrainingAttendance',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('position', models.CharField(choices=[('member', 'Member'), ('trainer', 'Trainer')], default='member', max_length=20)),
                ('arrival_time', models.DateTimeField(null=True)),
                ('remarks', models.CharField(max_length=1000, null=True)),
            ],
            options={
                'ordering': ('-created_at', '-modified_at'),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TrainingFeedback',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('remarks', models.TextField(validators=[irhrs.core.validators.validate_wysiwyg_field])),
                ('rating', models.FloatField(validators=[irhrs.core.validators.MinMaxValueValidator(max_value=10, min_value=1)])),
            ],
            options={
                'ordering': ('-created_at', '-modified_at'),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TrainingType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('slug', models.SlugField(blank=True, max_length=255, unique=True)),
                ('title', models.CharField(help_text='Self Explanatory', max_length=255, validators=[irhrs.core.validators.validate_title])),
                ('description', models.TextField(blank=True, help_text='Self Explanatory', validators=[irhrs.core.validators.validate_description])),
                ('budget_limit', models.FloatField(help_text='The total budget company wishes to spend on trainings of this type.', null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('amount_type', models.CharField(choices=[('NRS', 'NRS'), ('USD', 'USD')], default='NRS', max_length=3)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='UserTraining',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('start', models.DateTimeField(help_text='When did the user join this training?')),
                ('end', models.DateTimeField(help_text='Not Required.\nWhen will the training end?', null=True)),
                ('training_need', models.CharField(choices=[('request', 'User Requested'), ('assessment', 'Assessment'), ('performance-appraisal', 'Performance Appraisal'), ('task-efficiency', 'Task Efficiency'), ('others', 'Others')], help_text='\n            Why the user needs this training?\n            1. User Could have asked for training\n            2. An assessment report concluded this necessity.\n            3. Through Performance Appraisal.\n        ', max_length=20)),
            ],
            options={
                'ordering': ('-created_at', '-modified_at'),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='UserTrainingRequest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('status', models.CharField(choices=[('requested', 'Requested'), ('approved', 'Approved'), ('declined', 'Declined'), ('expired', 'Expired')], max_length=10)),
                ('request_remarks', models.CharField(max_length=255)),
                ('action_remarks', models.CharField(blank=True, max_length=255)),
            ],
            options={
                'ordering': ('-created_at', '-modified_at'),
                'abstract': False,
            },
        ),
    ]
